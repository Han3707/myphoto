import { useState } from 'react';
import { colors } from '../constants/colors';
import { typography } from '../constants/typography';
import { spacing } from '../constants/spacing';
import { breakpoints } from '../constants/breakpoints';

const ExperienceSection = () => {
  const [hoveredExperience, setHoveredExperience] = useState(null);

  const experiences = [
    {
      id: 1,
      company: "SSAFY (ÏÇºÏÑ± Ï≤≠ÎÖÑ SW ÏïÑÏπ¥Îç∞ÎØ∏)",
      position: "ÍµêÏú°ÏÉù",
      period: "2024.01 - 2024.12",
      type: "ÍµêÏú°",
      description: "1ÎÖÑÍ∞Ñ ÏßëÏ§ëÏ†ÅÏù∏ ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ Í∞úÎ∞ú ÍµêÏú° Í≥ºÏ†ïÏùÑ ÌÜµÌï¥ Ïã§Î¨¥ Ïó≠ÎüâÏùÑ Í∏∞Î•¥Í≥† ÏûàÏäµÎãàÎã§.",
      achievements: [
        "ÏïåÍ≥†Î¶¨Ï¶ò Î¨∏Ï†ú Ìï¥Í≤∞ Îä•Î†• Ìñ•ÏÉÅ (Î∞±Ï§Ä Í≥®Îìú Îì±Í∏â Îã¨ÏÑ±)",
        "ÌåÄ ÌîÑÎ°úÏ†ùÌä∏ Î¶¨Îçî Í≤ΩÌóò (3Ìöå)",
        "Flutter, React Í∏∞Î∞ò ÌíÄÏä§ÌÉù Í∞úÎ∞ú Í≤ΩÌóò",
        "Git ÌòëÏóÖ Î∞è ÏΩîÎìú Î¶¨Î∑∞ Î¨∏Ìôî Ï≤¥Îìù"
      ],
      skills: ["Java", "JavaScript", "Flutter", "React", "Git"],
      color: colors.accent.primary,
      icon: "üéì"
    },
    {
      id: 2,
      company: "Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏",
      position: "Í∞úÎ∞úÏûê",
      period: "2023.06 - ÌòÑÏû¨",
      type: "Í∞úÏù∏",
      description: "ÏÉàÎ°úÏö¥ Í∏∞Ïà† Ïä§ÌÉùÏùÑ ÌïôÏäµÌïòÎ©∞ Îã§ÏñëÌïú Í∞úÏù∏ ÌîÑÎ°úÏ†ùÌä∏Î•º ÏßÑÌñâÌïòÍ≥† ÏûàÏäµÎãàÎã§.",
      achievements: [
        "Ïã§ÏãúÍ∞Ñ ÌéÄÎî© ÌîåÎû´Ìèº Í∞úÎ∞ú (STOMP/WebSocket)",
        "ML Kit ÌôúÏö© Î™®ÏÖò Ïù∏Ïãù ÌîºÌä∏ÎãàÏä§ Ïï± Í∞úÎ∞ú",
        "Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî Í∞§Îü¨Î¶¨ Ïï± Í∞úÎ∞ú",
        "ÏÑ±Îä• ÏµúÏ†ÅÌôî Î∞è ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Í∞úÏÑ†Ïóê ÏßëÏ§ë"
      ],
      skills: ["Flutter", "React Native", "WebSocket", "ML Kit", "Firebase"],
      color: colors.accent.secondary,
      icon: "üíª"
    }
  ];

  const sectionStyle = {
    padding: `${spacing['2xl']} ${spacing.lg}`,
    background: colors.surface.light,
    minHeight: '100vh',
    display: 'flex',
    alignItems: 'center',
    width: '100%',
  };

  const containerStyle = {
    maxWidth: spacing.container.xl,
    margin: '0 auto',
    width: '100%',
  };

  const titleStyle = {
    fontFamily: typography.fontFamily.heading,
    fontSize: typography.fontSize['3xl'],
    fontWeight: typography.fontWeight.bold,
    color: colors.text.primary,
    textAlign: 'center',
    marginBottom: spacing['2xl'],
  };

  const timelineStyle = {
    position: 'relative',
    paddingLeft: spacing['2xl'],
  };

  const timelineLineStyle = {
    position: 'absolute',
    left: spacing.lg,
    top: 0,
    bottom: 0,
    width: '2px',
    background: colors.surface.border,
  };

  const experienceCardStyle = (experience, isHovered) => ({
    position: 'relative',
    background: colors.surface.elevated,
    borderRadius: spacing.card.borderRadius,
    padding: spacing.xl,
    marginBottom: spacing.xl,
    boxShadow: isHovered 
      ? '0 12px 35px rgba(0, 0, 0, 0.12)'
      : '0 4px 12px rgba(0, 0, 0, 0.08)',
    transition: 'all 0.3s ease-out',
    transform: isHovered ? 'translateX(8px)' : 'translateX(0)',
    border: `2px solid ${isHovered ? experience.color : colors.surface.border}`,
    cursor: 'pointer',
  });

  const timelineDotStyle = (experience, isHovered) => ({
    position: 'absolute',
    left: `-${spacing.lg}`,
    top: spacing.lg,
    width: '16px',
    height: '16px',
    borderRadius: '50%',
    background: experience.color,
    border: `3px solid ${colors.surface.light}`,
    boxShadow: isHovered ? `0 0 15px ${experience.color}40` : '0 2px 8px rgba(0, 0, 0, 0.1)',
    transition: 'all 0.3s ease',
    transform: isHovered ? 'scale(1.2)' : 'scale(1)',
  });

  const experienceHeaderStyle = {
    display: 'flex',
    alignItems: 'flex-start',
    gap: spacing.md,
    marginBottom: spacing.lg,
  };

  const experienceIconStyle = (experience, isHovered) => ({
    fontSize: typography.fontSize['2xl'],
    width: '50px',
    height: '50px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: '50%',
    background: `${experience.color}15`,
    transition: 'all 0.3s ease',
    transform: isHovered ? 'scale(1.1)' : 'scale(1)',
  });

  const experienceInfoStyle = {
    flex: 1,
  };

  const companyNameStyle = {
    fontFamily: typography.fontFamily.heading,
    fontSize: typography.fontSize.xl,
    fontWeight: typography.fontWeight.bold,
    color: colors.text.primary,
    marginBottom: spacing.xs,
  };

  const positionStyle = {
    fontFamily: typography.fontFamily.body,
    fontSize: typography.fontSize.lg,
    fontWeight: typography.fontWeight.medium,
    color: colors.text.secondary,
    marginBottom: spacing.xs,
  };

  const periodStyle = {
    fontFamily: typography.fontFamily.body,
    fontSize: typography.fontSize.sm,
    color: colors.text.muted,
    marginBottom: spacing.sm,
  };

  const typeBadgeStyle = (experience) => ({
    display: 'inline-block',
    background: `${experience.color}15`,
    color: experience.color,
    padding: `${spacing.xs} ${spacing.sm}`,
    borderRadius: '20px',
    fontSize: typography.fontSize.xs,
    fontWeight: typography.fontWeight.medium,
    marginBottom: spacing.md,
  });

  const descriptionStyle = {
    fontFamily: typography.fontFamily.body,
    fontSize: typography.fontSize.base,
    color: colors.text.body,
    lineHeight: typography.lineHeight.relaxed,
    marginBottom: spacing.lg,
  };

  const achievementsStyle = {
    marginBottom: spacing.lg,
  };

  const achievementsTitleStyle = {
    fontFamily: typography.fontFamily.heading,
    fontSize: typography.fontSize.lg,
    fontWeight: typography.fontWeight.bold,
    color: colors.text.primary,
    marginBottom: spacing.md,
  };

  const achievementItemStyle = {
    fontFamily: typography.fontFamily.body,
    fontSize: typography.fontSize.sm,
    color: colors.text.body,
    lineHeight: typography.lineHeight.relaxed,
    marginBottom: spacing.sm,
    paddingLeft: spacing.md,
    position: 'relative',
  };

  const achievementBulletStyle = (experience) => ({
    position: 'absolute',
    left: 0,
    top: '0.5em',
    width: '4px',
    height: '4px',
    borderRadius: '50%',
    background: experience.color,
  });

  const skillsContainerStyle = {
    display: 'flex',
    gap: spacing.sm,
    flexWrap: 'wrap',
  };

  const skillTagStyle = (experience) => ({
    background: colors.neutral.gray50,
    color: colors.text.secondary,
    padding: `${spacing.xs} ${spacing.sm}`,
    borderRadius: spacing.xs,
    fontSize: typography.fontSize.xs,
    fontWeight: typography.fontWeight.medium,
    border: `1px solid ${colors.surface.border}`,
  });

  return (
    <section id="experience" style={sectionStyle}>
      <div style={containerStyle}>
        <h2 style={titleStyle}>
          Ï†ÄÏùò Í≤ΩÎ†•Í≥º Í≤ΩÌóòÏûÖÎãàÎã§.
        </h2>

        <div style={timelineStyle}>
          <div style={timelineLineStyle} />
          
          {experiences.map((experience) => {
            const isHovered = hoveredExperience === experience.id;
            
            return (
              <div
                key={experience.id}
                style={experienceCardStyle(experience, isHovered)}
                onMouseEnter={() => setHoveredExperience(experience.id)}
                onMouseLeave={() => setHoveredExperience(null)}
              >
                <div style={timelineDotStyle(experience, isHovered)} />
                
                <div style={experienceHeaderStyle}>
                  <div style={experienceIconStyle(experience, isHovered)}>
                    {experience.icon}
                  </div>
                  
                  <div style={experienceInfoStyle}>
                    <h3 style={companyNameStyle}>
                      {experience.company}
                    </h3>
                    <p style={positionStyle}>
                      {experience.position}
                    </p>
                    <p style={periodStyle}>
                      {experience.period}
                    </p>
                    <span style={typeBadgeStyle(experience)}>
                      {experience.type}
                    </span>
                  </div>
                </div>
                
                <p style={descriptionStyle}>
                  {experience.description}
                </p>
                
                <div style={achievementsStyle}>
                  <h4 style={achievementsTitleStyle}>
                    Ï£ºÏöî ÏÑ±Í≥º
                  </h4>
                  {experience.achievements.map((achievement, index) => (
                    <div key={index} style={achievementItemStyle}>
                      <div style={achievementBulletStyle(experience)} />
                      {achievement}
                    </div>
                  ))}
                </div>
                
                <div style={skillsContainerStyle}>
                  {experience.skills.map((skill) => (
                    <span key={skill} style={skillTagStyle(experience)}>
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
            );
          })}
        </div>
      </div>

      <style jsx>{`
        /* Î∞òÏùëÌòï ÎîîÏûêÏù∏ */
        ${breakpoints.media.maxTablet} {
          .timeline {
            padding-left: ${spacing.xl} !important;
          }
          
          h2 {
            font-size: ${typography.fontSize['2xl']} !important;
          }
        }

        ${breakpoints.media.maxMobile} {
          .timeline {
            padding-left: ${spacing.lg} !important;
          }

          h2 {
            font-size: ${typography.fontSize.xl} !important;
          }
          
          .experience-header {
            flex-direction: column !important;
            align-items: flex-start !important;
          }
        }
      `}</style>
    </section>
  );
};

export default ExperienceSection; 